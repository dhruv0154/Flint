#pragma once

// ─────────────────────────────────────────────────────────────────────────────
//  TokenType Enum
// ─────────────────────────────────────────────────────────────────────────────
//  Enumerates all possible token types used in the Flint language.
//  These are generated by the `Scanner` and consumed by the `Parser`.
//
//  Token types fall into several categories:
//    1. Single-character tokens
//    2. One/two-character operators
//    3. Literals (identifiers, numbers, strings)
//    4. Keywords (reserved words)
//    5. EOF marker
// ─────────────────────────────────────────────────────────────────────────────

enum class TokenType 
{
    // ─────────────────────────────────────────────
    // 1. Single-character tokens (symbols)
    // ─────────────────────────────────────────────
    LEFT_PAREN,     // (
    RIGHT_PAREN,    // )
    LEFT_BRACE,     // {
    RIGHT_BRACE,    // }
    COMMA,          // ,
    DOT,            // .
    MINUS,          // -
    PLUS,           // +
    MODULO,         // %
    COLON,          // :
    QUESTION_MARK,  // ?
    SEMICOLON,      // ;
    SLASH,          // /
    STAR,           // *

    // ─────────────────────────────────────────────
    // 2. One or two-character operators
    // ─────────────────────────────────────────────
    BANG,           // !
    BANG_EQUAL,     // !=
    EQUAL,          // =
    EQUAL_EQUAL,    // ==
    GREATER,        // >
    GREATER_EQUAL,  // >=
    LESS,           // <
    LESS_EQUAL,     // <=

    // ─────────────────────────────────────────────
    // 3. Literals (user-defined values)
    // ─────────────────────────────────────────────
    IDENTIFIER,     // variable/function names
    STRING,         // string literals: "hello"
    NUMBER,         // numeric literals: 42, 3.14

    // ─────────────────────────────────────────────
    // 4. Keywords (reserved language constructs)
    // ─────────────────────────────────────────────
    AND,            // logical and
    CLASS,          // class declaration
    ELSE,           // else branch
    FALSE,          // boolean false
    FUNC,           // function declaration
    FOR,            // for loop
    IF,             // if condition
    NOTHING,        // Flint’s equivalent of nil/null
    OR,             // logical or
    RETURN,         // return from function
    SUPER,          // super class call
    THIS,           // current object reference
    TRUE,           // boolean true
    LET,            // variable declaration
    WHILE,          // while loop
    BREAK,          // break statement
    CONTINUE,       // continue statement

    // ─────────────────────────────────────────────
    // 5. Sentinel Token
    // ─────────────────────────────────────────────
    END_OF_FILE     // indicates end of source input
};